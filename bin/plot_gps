#!/usr/bin/env python

import argparse
import matplotlib.pyplot as pl
import numpy as np

from opensfm import io
from opensfm.commands.create_submodels import MetaDataSet


def set_axes_limits(samples):
    min = np.amin(positions, 0)
    max = np.amax(positions, 0)
    dist_x = max[1] - min[1]
    dist_y = max[0] - min[0]

    pl.xlim(min[1] - dist_x / 20, max[1] + dist_x / 20)
    pl.ylim(min[0] - dist_y / 20, max[0] + dist_y / 20)


def plot_clusters(ax, positions, labels, centers):
    ax.plot(centers[:, 1], centers[:, 0], 'xk')
    ax.scatter(positions[:, 1], positions[:, 0], c=labels, lw=0, s=30)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Plot matches between images')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    parser.add_argument('--clusters',
                        help='plot images clusters in different colors',
                        action='store_true')
    parser.add_argument('--save-figs',
                        help='save figures istead of showing them',
                        action='store_true')
    args = parser.parse_args()

    meta_data = MetaDataSet(args.dataset)

    fig = pl.figure(figsize=(20, 15))
    fig.suptitle('GPS positions', fontsize=18)

    ax = fig.add_subplot(111)
    ax.set_aspect(1)
    pl.xlabel('Longitude', fontsize=16)
    pl.ylabel('Latitude', fontsize=16)

    if args.clusters:
        positions, labels, centers = meta_data.load_clusters()[1:]
        plot_clusters(ax, positions, labels, centers)
        set_axes_limits(positions)
    else:
        positions = []
        for image, lon, lat in meta_data.images_with_gps():
            positions.append([lon, lat])

        positions = np.array(positions)

        ax.plot(positions[:, 1], positions[:, 0], 'or')
        set_axes_limits(positions)


    if args.save_figs:
        p = args.dataset + '/plot_gps'
        io.mkdir_p(p)
        filename = 'clusters.png' if args.clusters else  'positions.png'
        pl.savefig(p + '/' + filename, dpi=100)
        pl.close()
    else:
        pl.show()