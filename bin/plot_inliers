#!/usr/bin/env python

import argparse
import matplotlib.pyplot as pl
import numpy as np

from opensfm import dataset
from opensfm import features
from opensfm import matching
from opensfm import io


def plot_matches(plot, im1, im2, p1, p2, line_format='c', point_format='ob'):
    h1, w1, c = im1.shape
    h2, w2, c = im2.shape
    image = np.zeros((max(h1,h2), w1+w2, 3), dtype=im1.dtype)
    image[0:h1, 0:w1, :] = im1
    image[0:h2, w1:(w1+w2), :] = im2

    p1 = features.denormalized_image_coordinates(p1, w1, h1)
    p2 = features.denormalized_image_coordinates(p2, w2, h2)
    plot.imshow(image)
    for a, b in zip(p1, p2):
        plot.plot([a[0], b[0] + w1], [a[1], b[1]], line_format)

    plot.plot(p1[:,0], p1[:,1], point_format)
    plot.plot(p2[:,0] + w1, p2[:,1], point_format)


def plot_sub(figure, rows, columns, index, title, im1, im2, p1, p2, line_format, point_format, data):
    subplot = figure.add_subplot(rows, columns, index)
    subplot.axis('off')
    subplot.text(0.5, 0.9,
                 title,
                 horizontalalignment='center',
                 fontsize=12,
                 transform = subplot.transAxes)

    plot_matches(subplot, data.image_as_array(im1), data.image_as_array(im2), p1, p2, line_format, point_format)


def plot_symmetric_matches(im1, im2, data, save_figs=False):
    p1, f1 = data.load_features(im1)
    i1 = data.load_feature_index(im1, f1)

    p2, f2 = data.load_features(im2)
    i2 = data.load_feature_index(im2, f2)

    symmetric_matches = matching.match_symmetric(f1, i1, f2, i2, data.config)

    s_matches1 = p1[symmetric_matches[:,0]]
    s_matches2 = p2[symmetric_matches[:,1]]

    fig = pl.figure(figsize=(20, 10))
    fig.suptitle('Matches: ' + im1 + ' - ' + im2, fontsize=14, fontweight='bold')

    plot_sub(fig, 3, 1, 1,
             'Number of symmetric matches: ' + str(symmetric_matches.shape[0]),
             im1, im2,
             s_matches1, s_matches2,
             'c', 'ob',
             data)

    robust_matches = matching.robust_match(p1, p2, symmetric_matches, data.config)

    r_matches1 = p1[robust_matches[:,0]]
    r_matches2 = p2[robust_matches[:,1]]

    plot_sub(fig, 3, 1, 2,
             'Number of robust matching inliers: ' + str(robust_matches.shape[0]),
             im1, im2,
             r_matches1, r_matches2,
             'g', 'oy',
             data)

    outliers = np.empty((0,2), int)
    for match in symmetric_matches:

        found = False
        for robust_match in robust_matches:
            if np.array_equal(match, robust_match):
                found = True
                break

        if not found:
            outliers = np.vstack((outliers, match))

    outliers1 = p1[outliers[:,0]]
    outliers2 = p2[outliers[:,1]]

    plot_sub(fig, 3, 1, 3,
             'Number of robust matching outliers: ' + str(outliers.shape[0]),
             im1, im2,
             outliers1, outliers2,
             'r', 'om',
             data)

    fig.subplots_adjust(left=0.01, bottom=0.01, right=0.99, top=0.96, wspace=0, hspace=0)

    if save_figs:
        p = args.dataset + '/plot_inliers'
        io.mkdir_p(p)
        fig.set_size_inches(12, 12)
        fig.savefig(p + '/' + im1 + '_' + im2 + '.jpg', dpi=100)
        pl.close()
    else:
        pl.show()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Plot inlier and outlier matches between images')
    parser.add_argument('dataset',
                        help='path to the data set to be processed')
    parser.add_argument('image1',
                        help='name of the first image to show')
    parser.add_argument('image2',
                        help='name of the second image to show')
    parser.add_argument('--save_figs',
                        help='save figures instead of showing them',
                        action='store_true')

    args = parser.parse_args()
    data_set = dataset.DataSet(args.dataset)

    plot_symmetric_matches(args.image1, args.image2, data_set, args.save_figs)

