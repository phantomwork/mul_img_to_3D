#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import numpy as np
from labmv.transformations import rotation_from_matrix
import argparse
import json
from labmv import dataset
from labmv import features
import networkx as nx
from networkx.algorithms import bipartite

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D



def square_aspect_ratio(ax):
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    zmin, zmax = ax.get_zlim()
    rmin = min(xmin, ymin, zmin)
    rmax = max(xmax, ymax, zmax)
    r = rmax - rmin
    xm = (r - xmax + xmin) / 2
    ym = (r - ymax + ymin) / 2
    zm = (r - zmax + zmin) / 2
    ax.auto_scale_xyz([xmin - xm, xmax + xm],
                      [ymin - ym, ymax + ym],
                      [zmin - zm, zmax + zm])


def roundness(X):
    '''Compute a roundness coeficient that is 1 for points in a
    sphere and 0 for points in a plane'''
    s = np.linalg.svd(np.array(X), False, False)
    return s[-1] / s[0]



parser = argparse.ArgumentParser(description='Compute reconstructions for every pair of images with enough common tracks')
parser.add_argument('dataset',
                    help='path to the dataset to be processed')
parser.add_argument('-v', '--visual', action='store_true',
                    help='plot results during the process')
args = parser.parse_args()


data = dataset.DataSet(args.dataset)
g = data.tracks_graph()

# Get the image connectivity graph.
track_nodes, image_nodes = bipartite.sets(g)
image_graph = bipartite.weighted_projected_graph(g, image_nodes)


# Iterate over neighboring images.
for im1, im2 in image_graph.edges():
    print 'Matching image', im1, 'with image', im2
    d1 = data.exif_data(im1)
    d2 = data.exif_data(im2)

    t1, t2 = g[im1], g[im2]
    p1, p2 = [], []
    tracks = []
    for track in t1:
        if track in t2:
            p1.append(t1[track]['feature'])
            p2.append(t2[track]['feature'])
            tracks.append(track)
    p1 = np.array(p1)
    p2 = np.array(p2)
    if len(p1) > 20:
        R, t, inliers, Xs = features.two_view_reconstruction(p1, p2, d1, d2)
        print R, t
        print len(p1), len(inliers)

        if len(inliers) > 20:
            T = np.identity(4)
            T[:3,:3] = R
            angle, direction, point = rotation_from_matrix(T)
            angleaxis = direction / np.linalg.norm(direction) * angle
            reconstruction = {
                "cameras": [
                    {
                        "id": im1,
                        "width": d1["width"],
                        "height": d1["height"],
                        "focal": d1["focal_ratio"] * d1["width"],
                    },
                    {
                        "id": im2,
                        "width": d2["width"],
                        "height": d2["height"],
                        "focal": d2["focal_ratio"] * d2["width"],
                    },
                ],
                
                "shots" : [
                    {
                        "id": im1,
                        "camera": im1,
                        "rotation": [0, 0, 0],
                        "translation": [0, 0, 0],
                    },
                    {
                        "id": im2,
                        "camera": im2,
                        "rotation": list(angleaxis),
                        "translation": list(t),
                    },
                ],

                "points" : [
                    {
                        "id": tracks[inlier],
                        "coordinates": X,
                    } for inlier, X in zip(inliers, Xs)
                ]
            }

            with open(data.reconstruction_file(), 'w') as fout:
                fout.write(json.dumps(reconstruction, indent=4))

            print 'roundness:', roundness(Xs)

            if args.visual:
                fig = plt.figure()
                ax = fig.add_subplot(211, projection='3d')
                X = np.array(Xs)
                ax.scatter(X[:, 0], X[:, 1], X[:, 2], c='b')
                ax.scatter([0], [0], [0], zdir='y', c='r')
                O = - np.dot(R, t)
                ax.scatter(O[0], O[1], O[2], c='g')

                square_aspect_ratio(ax)

                fig.add_subplot(212)
                features.plot_matches(data.image_as_array(im1),
                                      data.image_as_array(im2),
                                      p1[inliers],
                                      p2[inliers])



