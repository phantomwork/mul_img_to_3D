#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import numpy as np
import cv2
from itertools import combinations
import argparse
from labmv import dataset
from labmv import features


parser = argparse.ArgumentParser(description='Match features between all image pairs.')
parser.add_argument('dataset',
                    help='path to the dataset to be processed')
parser.add_argument('-v', '--visual', action='store_true',
                    help='plot results during the process')
args = parser.parse_args()


data = dataset.DataSet(args.dataset)
images = data.images()

print 'Loading features and indexes'
p, f = {}, {}
index = {}
for image in images:
    p[image], f[image] = features.read_sift(data.sift_file(image))
    index[image] = cv2.flann_Index()
    index[image].load(f[image], data.sift_index_file(image))

def match(imagepair):
    im1, im2 = imagepair
    print 'Matching image', im1, 'with image', im2,

    matches = features.match_symmetric(f[im1], index[im1], f[im2], index[im2], data.config)
    np.savetxt(data.matches_file(im1, im2), matches, "%d")

    if args.visual:
        features.plot_matches(data.image_as_array(im1),
                              data.image_as_array(im2),
                              p[im1][matches[:,0]],
                              p[im2][matches[:,1]])

    rmatches = features.robust_match(p[im1], p[im2], matches, data.config)
    np.savetxt(data.robust_matches_file(im1, im2), rmatches, "%d")
    if args.visual:
        features.plot_matches(data.image_as_array(im1),
                              data.image_as_array(im2),
                              p[im1][rmatches[:,0]],
                              p[im2][rmatches[:,1]])
    print "{0} / {1} matches found".format(len(rmatches), len(matches))

from multiprocessing import Pool
p = Pool(data.config['processes'])
p.map(match, combinations(images, 2))

