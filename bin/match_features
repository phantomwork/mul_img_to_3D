#!/usr/bin/env python
import os.path, sys
import time
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import numpy as np
import cv2
from itertools import combinations
import argparse
from labmv import dataset
from labmv import features


parser = argparse.ArgumentParser(description='Match features between all image pairs.')
parser.add_argument('dataset',
                    help='path to the dataset to be processed')
args = parser.parse_args()


data = dataset.DataSet(args.dataset)
images = data.images()

print 'Loading features and indexes'
p, f = {}, {}
index = {}
preemptive_ids = {}
for image in images:
    p[image], f[image] = features.read_sift(data.sift_file(image))
    index[image] = cv2.flann_Index()
    index[image].load(f[image], data.sift_index_file(image))
    sz = p[image][:,2]
    order = np.argsort(sz)
    preemptive_ids[image] = order[-data.config['preemptive_max']:]


def match(imagepair):
    im1, im2 = imagepair
    print 'Matching image', im1, 'with image', im2,

    # preemptive matching
    t = time.time()
    matches_pre = features.match_lowe_bf(f[im1][preemptive_ids[im1],:],
                                         f[im2][preemptive_ids[im2],:],
                                         data.config)
    print "\nPreemptive matching {0}, time : {1}".format(len(matches_pre), time.time()-t)

    if len(matches_pre) > data.config['preemptive_threshold']:
        t = time.time()
        matches = features.match_symmetric(f[im1], index[im1], f[im2], index[im2], data.config)
        print 'flann matching time : ', time.time() - t

        if len(matches) < 20:
            print "0 / {0} matches found".format(len(matches))
        else:
            rmatches = features.robust_match(p[im1], p[im2], matches, data.config)
            if len(rmatches) >= 20:
                np.savetxt(data.robust_matches_file(im1, im2), rmatches, "%d")
            print "{0} / {1} matches found".format(len(rmatches), len(matches))
    else:
        print "Too few preemptive matches / {0} matches found".format(len(matches_pre))

from multiprocessing import Pool
p = Pool(data.config['processes'])
p.map(match, combinations(images, 2))
