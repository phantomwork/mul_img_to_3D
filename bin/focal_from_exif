#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import copy
import logging
import time

from opensfm import dataset
from opensfm import exif
from opensfm import types


logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

parser = argparse.ArgumentParser(
    description="Extract camera information from images' EXIF tags")
parser.add_argument('dataset', help='the dataset to process')
args = parser.parse_args()

start = time.time()
data = dataset.DataSet(args.dataset)

camera_models = {}
for image in data.images():
    logging.info('Extracting focal lengths for image {}'.format(image))

    # EXIF data in Image
    d = exif.extract_exif_from_file(data.load_image(image))

    # Image Height and Image Width
    if d['width'] <= 0 or not data.config['use_exif_size']:
        d['height'], d['width'] = data.image_as_array(image).shape[:2]

    data.save_exif(image, d)

    if d['camera'] not in camera_models:
        camera = exif.camera_from_exif_metadata(d, data)
        camera_models[d['camera']] = camera

# Override any camera that is specified in the camera models overrides file.
if data.camera_models_overrides_exists():
    overrides = data.load_camera_models_overrides()
    if "all" in overrides:
        for key in camera_models:
            camera_models[key] = copy.copy(overrides["all"])
            camera_models[key].id = key
    else:
        for key, value in overrides:
            camera_models[key] = value
data.save_camera_models(camera_models)

end = time.time()
with open(data.profile_log(), 'a') as fout:
    fout.write('focal_from_exif: {0}\n'.format(end - start))
