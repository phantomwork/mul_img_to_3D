#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import os, sys
from opensfm import dataset
import json
import exifread
from subprocess import check_output

from opensfm.sensors import sensor_data

def usage():
    print 'USAGE: %s data_set_path' % sys.argv[0]
    sys.exit(0)


if len(sys.argv) > 1:
    path = sys.argv[1]
else:
    usage()


def eval_frac(value):
    return float(value.num) / float(value.den)

def gps_to_decimal(values, reference):
    sign = 1 if reference in 'NE' else -1
    degrees = eval_frac(values[0])
    minutes = eval_frac(values[1])
    seconds = eval_frac(values[2])
    return sign * (degrees + minutes / 60 + seconds / 3600)


data = dataset.DataSet(path)
images = data.images()
missing_sensors = {}


if os.path.exists(data.data_path + '/imagedata.json'):
    with open(data.data_path + '/imagedata.json', 'rb') as f:
        exif_database = json.loads(f.read())

for image in images:

    print 'Extracting focal lengths for image', image

    # TODO(pau): replace jhead with exifdata.
    exif_string = check_output(['jhead', data.image_file(image)])
    exif = {}
    for line in exif_string.splitlines():
        words = line.split(':', 1)
        if len(words) == 2:
            exif[words[0].strip()] = words[1].strip()

    size = exif['Resolution'].split('x')
    width, height = [int(i) for i in size]

    if '(35mm equivalent:' in exif.get('Focal length','none'):
        focal_35 = float(exif['Focal length'].split('(35mm equivalent:')[1].split('mm')[0])
        focal_ratio = focal_35 / 36.0 # 35mm film produces 36x24mm pictures.
    else:
        model = exif.get('Camera model','none').lower()
        make = exif.get('Camera make','none').lower()
        model = model.replace(make,'') # remove possible duplicate 'make' information in 'model' for better matching
        sensor_string = (make + ' ' + model).lower()

        if 'CCD width' in exif:
            sensor_width = float(exif['CCD width'].strip('mm'))
        elif sensor_string in sensor_data:
            sensor_width = sensor_data[sensor_string]
        else:
            sensor_width = None

        if 'Focal length' in exif:
            focal = float(exif['Focal length'].split()[0].strip('mm'))
        else:
            focal = None

        if sensor_width is not None and focal is not None:
            focal_ratio = focal / sensor_width
        else:
            focal_ratio = 0

        focal_35 = 36.0 * focal_ratio

    if focal_ratio == 0:
        # try reading data from exif database (imagedata.json) if exist
        exif = exif_database.get(image,None)
        if exif is not None:
            model = exif.get('model','none').lower()
            make = exif.get('make','none').lower()
            focal = float(exif.get('fmm',0.0))
            focal_35 = float(exif.get('fmm35',0.0))
            if not (focal_35 > 0):
                model = model.replace(make,'') # remove possible duplicate 'make' information in 'model' for better matching
                sensor_string = (make + ' ' + model).lower()
                sensor_width = sensor_data.get(sensor_string,None)
                if sensor_width is not None and focal is not None:
                    focal_ratio = focal / sensor_width
                else:
                    focal_ratio = 0
                focal_35 = 36.0 * focal_ratio
            else:
                focal_ratio = focal_35 / 36.0
    if focal_ratio == 0:
        missing_sensors[sensor_string] = 1

    d = {
            'width': width,
            'height': height,
            'focal_ratio': focal_ratio,
            'focal_35mm_equiv': focal_35,
        }

    # GPS
    with open(data.image_file(image)) as f:
        tags = exifread.process_file(f)
        if 'GPS GPSLatitude' in tags:
            lat = gps_to_decimal(tags['GPS GPSLatitude'].values,
                                 tags['GPS GPSLatitudeRef'].values)
            lon = gps_to_decimal(tags['GPS GPSLongitude'].values,
                                 tags['GPS GPSLongitudeRef'].values)
            d['gps'] = {}
            d['gps']['latitude'] = lat
            d['gps']['longitude'] = lon
            if 'GPS GPSAltitude' in tags:
                d['gps']['altitude'] = eval_frac(tags['GPS GPSAltitude'].values[0])
            if 'GPS GPSDOP' in tags:
                d['gps']['dop'] = eval_frac(tags['GPS GPSDOP'].values[0])


    with open(data.exif_file(image), 'w') as fout:
        fout.write(json.dumps(d, indent=4))

    with open(data.data_path+'missing_sensor.json', 'w') as fout:
        fout.write(json.dumps(missing_sensors, indent=4))
