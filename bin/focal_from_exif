#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import json
import exifread
import numpy as np
from cv2 import imread

from opensfm.sensors import sensor_data
from opensfm import dataset



def usage():
    print 'USAGE: %s data_set_path' % sys.argv[0]
    sys.exit(0)


if len(sys.argv) > 1:
    path = sys.argv[1]
else:
    usage()


def eval_frac(value):
    return float(value.num) / float(value.den)

def gps_to_decimal(values, reference):
    sign = 1 if reference in 'NE' else -1
    degrees = eval_frac(values[0])
    minutes = eval_frac(values[1])
    seconds = eval_frac(values[2])
    return sign * (degrees + minutes / 60 + seconds / 3600)


data = dataset.DataSet(path)
images = data.images()
missing_sensors = {}
camera_models = {}


if os.path.exists(data.data_path + '/imagedata.json'):
    with open(data.data_path + '/imagedata.json', 'rb') as f:
        exif_database = json.loads(f.read())
else:
    exif_database = {}

for image in images:

    print 'Extracting focal lengths for image', image
    with open(data.image_file(image)) as f:
        tags = exifread.process_file(f, details=False)
    # Image Width and Image Height
    if 'EXIF ExifImageWidth' in tags and 'EXIF ExifImageLength' in tags:
        width, height = (int(tags['EXIF ExifImageWidth'].values[0]),
                        int(tags['EXIF ExifImageLength'].values[0]) )
    else:
        sz = imread(data.image_file(image)).shape
        width, height = sz[1], sz[0]

    # Camera make and model
    if 'EXIF LensMake' in tags:
        make = tags['EXIF LensMake'].values
    elif 'Image Make' in tags:
        make = tags['Image Make'].values
    else:
        make = 'unknown'

    if 'EXIF LensModel' in tags:
        model = tags['EXIF LensModel'].values
    elif 'Image Model' in tags:
        model = tags['Image Model'].values
    else:
        model = 'unknown'

    if make != 'unknown':
        model = model.replace(make,'').strip() # remove possible duplicate 'make' information in 'model' for better matching
    sensor_string = (make + ' ' + model).lower()

    if 'EXIF FocalLengthIn35mmFilm' in tags:
        focal_35 = float((tags['EXIF FocalLengthIn35mmFilm'].values[0]))
        focal_ratio = focal_35 / 36.0 # 35mm film produces 36x24mm pictures.
    else:
        if 'EXIF CCD width' in tags:
            sensor_width = float(tags['EXIF CCDWidth'].values[0])
        elif sensor_string in sensor_data:
            sensor_width = sensor_data[sensor_string]
        else:
            sensor_width = None

        if 'EXIF FocalLength' in tags:
            focal = float(eval_frac(tags['EXIF FocalLength'].values[0]))
        else:
            focal = None

        if sensor_width is not None and focal is not None:
            focal_ratio = focal / sensor_width
        else:
            focal_ratio = 0

        focal_35 = 36.0 * focal_ratio


    if focal_ratio == 0:
        # try reading data from exif database (imagedata.json) if exist
        exif = exif_database.get(image,None)
        if exif is not None:
            model = exif.get('model','unknown').lower()
            make = exif.get('make','unknown').lower()

            if make != 'unknown':
                model = model.replace(make+' ','') # remove possible duplicate 'make' information in 'model' for better matching

            focal = float(exif.get('fmm',0.0))
            focal_35 = float(exif.get('fmm35',0.0))
            sensor_string = (make + ' ' + model).lower()
            if not (focal_35 > 0):
                model = model.replace(make,'') # remove possible duplicate 'make' information in 'model' for better matching
                sensor_width = sensor_data.get(sensor_string,None)
                if sensor_width is not None and focal is not None:
                    focal_ratio = focal / sensor_width
                else:
                    focal_ratio = 0
                focal_35 = 36.0 * focal_ratio
            else:
                focal_ratio = focal_35 / 36.0

    if focal_ratio == 0:
        missing_sensors[sensor_string] = 1

    d = {
            'width': width,
            'height': height,
            'focal_ratio': focal_ratio,
            'focal_35mm_equiv': focal_35,
            'camera': sensor_string
        }

    # GPS
    if 'GPS GPSLatitude' in tags:
        lat = gps_to_decimal(tags['GPS GPSLatitude'].values,
                             tags['GPS GPSLatitudeRef'].values)
        lon = gps_to_decimal(tags['GPS GPSLongitude'].values,
                             tags['GPS GPSLongitudeRef'].values)
        d['gps'] = {}
        d['gps']['latitude'] = lat
        d['gps']['longitude'] = lon
        if 'GPS GPSAltitude' in tags:
            d['gps']['altitude'] = eval_frac(tags['GPS GPSAltitude'].values[0])
        if 'GPS GPSDOP' in tags:
            d['gps']['dop'] = eval_frac(tags['GPS GPSDOP'].values[0])
    elif exif_database:
        # Check whether gps is provided in a json file (imagedata.json)
        if image in exif_database:
            exif = exif_database[image]
            d['gps'] = {}
            d['gps']['latitude'] = exif.get('lat', 0.0)
            d['gps']['longitude'] = exif.get('lon', 0.0)
            d['gps']['altitude'] = exif.get('altitude', 0.0)
            d['gps']['dop'] = exif.get('gps_accuracy', -1)
            if d['gps']['dop'] < 0:
                del d['gps']['dop']

    if sensor_string not in camera_models:
        camera_models[sensor_string] = {
                'width': width,
                'height': height,
                'focal_ratio': focal_ratio,
                'focal_35mm_equiv': focal_35,
                "focal": d['focal_ratio'] * np.max([d['width'], d['height']]),
                "exif_focal": d['focal_ratio'] * np.max([d['width'], d['height']])
            }

    with open(data.exif_file(image), 'w') as fout:
        fout.write(json.dumps(d, indent=4))

with open(data.data_path+'missing_sensor.json', 'w') as fout:
    fout.write(json.dumps(missing_sensors, indent=4))

with open(data.camera_model_file(), 'w') as fout:
    fout.write(json.dumps(camera_models, indent=4))
