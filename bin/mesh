#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import time
import json
import scipy.spatial
from opensfm import dataset
from opensfm import reconstruction

if __name__ == "__main__":
    start = time.time()
    parser = argparse.ArgumentParser(description='Compute reconstruction')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    graph = data.tracks_graph()
    
    with open(data.reconstruction_file()) as fin:
        reconstructions = json.load(fin)

    for r in reconstructions:
        for shot_id, shot in r['shots'].items():
            if shot_id not in graph:
                continue
            cam = r['cameras'][shot['camera']]
            vertices = []
            pixels = []
            for track_id, edge in graph[shot_id].items():
                if track_id in r['points']:
                    point = r['points'][track_id]
                    vertices.append(point['coordinates'])
                    pixel = reconstruction.reproject(cam, shot, point)
                    pixels.append(pixel.tolist())

            tri = scipy.spatial.Delaunay(pixels)
            faces = tri.simplices.tolist()
            uvs = [(x / cam['width'], 1.0 - y / cam['height']) for x,y in pixels]
            r['shots'][shot_id]['vertices'] = vertices
            r['shots'][shot_id]['faces'] = faces
            r['shots'][shot_id]['uvs'] = uvs

    with open(data.reconstruction_file() + '.meshed', 'w') as fout:
        fout.write(json.dumps(reconstructions, indent=4))

    end = time.time()
    with open(data.profile_log(), 'a') as fout:
        fout.write('mesh: {0}\n'.format(end - start))
