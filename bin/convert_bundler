#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import argparse

import cv2
import json
import numpy as np

import opensfm.dataset as dataset
import opensfm.io as io

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Convert output from Bundler to OpenSfM reconstructions')
    parser.add_argument('dataset', help='path to the dataset to be processed')
    parser.add_argument('--list', help='the list.txt file')
    parser.add_argument('--bundleout', help='the bundle.out file')
    args = parser.parse_args()

    # Assume that bundle.out, list.txt and all the images are in datapath
    data_path = args.dataset

    ## create symbolic links to images in data_path from data_path/'images'/
    # data = dataset.DataSet(data_path)
    # data.set_image_path('')
    # image_path = os.path.join(data_path, 'images')
    # if not os.path.exists(image_path):
    #     os.makedirs(image_path)
    # for image in data.images():
    #     os.symlink(os.path.join(data_path, image), os.path.join(image_path, image))

    # converting reconstruction from bundler to OpenSfM reconstruction
    if args.list:
        list_file = args.list
    else:
        list_file = os.path.join(data_path, 'list.txt')
    if args.bundleout:
        bundle_file = args.bundleout
    else:
        bundle_file = os.path.join(data_path, 'bundle.out')
    if os.path.exists(bundle_file) and os.path.exists(list_file):
        print 'Converting output from Bundler to OpenSfM'
        track_file = os.path.join(data_path,'tracks.csv')
        reconstruction_file = os.path.join(data_path, 'reconstruction.json')
        io.import_bundler(data_path, bundle_file, list_file, track_file, reconstruction_file)
    else:
        print 'Can find list.txt or bundle.out.'


