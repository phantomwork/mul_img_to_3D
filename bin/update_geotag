#!/usr/bin/env python
import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import argparse

import json
import numpy as np
import pyexiv2

from opensfm import dataset
from opensfm.geotag_from_gpx import add_gps_to_exif

parser = argparse.ArgumentParser(description='Write updated geotag information to image files')
parser.add_argument('dataset', help='path to the dataset to be processed')
parser.add_argument('--image_path', help='path to images', default='')
args = parser.parse_args()

# This script assumes that the reconstruction contains aligned gps, altitude and direction information about the images (after bin/align data_path)
data_path = args.dataset


data = dataset.DataSet(data_path) # assumes that the images is in data_path/'images'
if args.image_path: data.set_image_path(args.image_path)

overwrite_original = data.config.get('overwrite_original', False)
updated_image_path = os.path.join(data.data_path, 'images_updated')
if not overwrite_original and not os.path.exists(updated_image_path):
    os.makedirs(updated_image_path)

with open(data.reconstruction_file(), 'r') as fin:
    reconstructions = json.loads(fin.read())

for reconstruction in reconstructions:
    # write updated gps/compass to the image file
    for image in reconstruction['shots'].keys():
        image_path = data.image_file(image)
        new_image_path = None if overwrite_original else os.path.join(updated_image_path, image)
        gps = reconstruction['shots'][image]['gps']
        add_gps_to_exif(image_path, gps['lat'], gps['lon'], gps['altitude'], gps['direction'], new_image_path)


