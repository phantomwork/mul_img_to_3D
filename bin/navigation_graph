#!/usr/bin/env python

import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import time
import numpy as np
import scipy.spatial.distance as dist
import networkx as nx

from opensfm import dataset, reconstruction


def vector2_angle(x1, y1, x2, y2):
    """ Calculates the angle between two vectors on the plane.

    :param x1: The x coordinate for the first vector
    :param y1: The y coordinate for the first vector
    :param x2: The x coordinate for the second vector
    :param y2: The y coordinate for the second vector
    :return: The angle between the vectors
    """

    angle = np.arctan2(y1, x1) - np.arctan2(y2, x2)
    if angle > np.pi:
        return angle - 2 * np.pi
    elif angle < -np.pi:
        return angle + 2 * np.pi
    else:
        return angle


def angle_diff(a1, a2):
    """ Calculates the difference between two angles.

    :param a1: Array of angles
    :param a2: The angle to subtract
    :return: The difference between the angles
    """

    angles = a1 - a2

    angles[angles > np.pi] -= 2 * np.pi
    angles[angles < -np.pi] += 2 * np.pi

    return angles


def get_vertical_angles(V):
    """ Calculates the angle between vectors and the XY-plane.
    :param V: Array of 3-dimensional vectors.
    :return: The angle between the vectors and the XY-plane in radians.
    """
    return [get_vertical_angle(v) for v in V]


def get_vertical_angle(v):
    """ Calculates the angle between a vector and the XY-plane.
    :param v: A 3-dimensional vector.
    :return: The angle between the vector and the XY-plane in radians.
    """
    xy_plane_normal = np.array([0, 0, 1], np.float64)
    vertical_dir_angle = np.arcsin(np.dot(xy_plane_normal, v) / np.linalg.norm(v))

    return vertical_dir_angle


def get_possible_positions(min_distance, max_distance, distances):
    """ Retrieves the indices for the positions within a distance from the position in the
        interval between the minimum distance and the maximum distance.
    :param min_distance: Float specifying the minimum distance to the position.
    :param max_distance: Float specifying the maximum distance to the position.
    :param distances: The distances for the other positions to the position.
    :return: The indices of the positions within the interval [min_distance, max_distance].
    """
    return np.where((min_distance < distances) & (distances < max_distance))[0]


def get_direction_changes(direction, directions):
    """ Calculates the direction change parallel to the XY-plane between the direction and the other directions.
    :param direction: The direction.
    :param directions: The other directions.
    :returns The direction changes parallel to the XY-plane in radians.
    """
    direction_changes = np.array(
        [vector2_angle(direction[0], direction[1], other_direction[0], other_direction[1])
            for other_direction in directions],
        np.float64)

    return direction_changes


def get_vertical_direction_diffs(direction, directions):
    """ Calculates the vertical direction differences between the direction and the other directions.
    :param direction: The direction.
    :param directions: The other directions.
    :returns The direction changes perpendicular to the XY-plane in radians.
    """
    vertical_dir_angle = get_vertical_angle(direction)
    vertical_dir_angles = get_vertical_angles(directions)
    vertical_dir_diffs = angle_diff(vertical_dir_angles, vertical_dir_angle)

    return vertical_dir_diffs


def get_direction_turns_and_motion_angles(
        min_distance,
        max_distance,
        preferred_distance,
        distances,
        position,
        direction,
        positions,
        directions):
    """ Retrieves the indices for the positions within a distance from the position in the
        interval between the minimum distance and the maximum distance.
        Also calculates the direction change and the difference in motion with respect to the direction for
        the retrieved positions.

    :param min_distance: Float specifying the minimum distance to the position.
    :param max_distance: Float specifying the maximum distance to the position.
    :param preferred_distance: Float specifying the preferred distance to the position.
    :param distances: The distances for the other positions to the position.
    :param position: The position.
    :param direction: The direction for the position.
    :param positions: All positions.
    :param directions: All directions.
    :return: The indices of the positions in the specified interval. The direction turns in radians in the plane and the
             motion turns in radians in the plane with respect to the direction.
    """

    # Order positions within interval according to shortest distance
    position_indices = get_possible_positions(min_distance, max_distance, distances)
    preferred_distances = np.abs(distances[position_indices] - preferred_distance)
    ordered_indices = position_indices[np.argsort(preferred_distances)]

    motions = positions[ordered_indices] - position
    motion_angles = get_direction_changes(direction, motions)
    direction_turns = get_direction_changes(direction, directions[ordered_indices])
    vertical_dir_diffs = get_vertical_direction_diffs(direction, directions[ordered_indices])
    vertical_motion_diffs = get_vertical_direction_diffs(direction, motions)

    return ordered_indices, direction_turns, motion_angles, vertical_dir_diffs, vertical_motion_diffs


def create_optical_center_graph(reconstructions, config):

    optical_centers = []
    viewing_directions = []
    shot_ids = []

    for r in reconstructions:
        for shot_id in r['shots'].keys():
            shot = r['shots'][shot_id]
            optical_centers.append(reconstruction.optical_center(shot))
            viewing_directions.append(reconstruction.viewing_direction(shot))
            shot_ids.append(shot_id)

    optical_centers = np.vstack(optical_centers)
    viewing_directions = np.vstack(viewing_directions)

    D = dist.squareform(dist.pdist(optical_centers))

    min_distance = config.get('nav_min_distance', 0.01)
    step_pref_distance = config.get('nav_step_pref_distance', 0)

    step_max_distance = config.get('nav_step_max_distance', 20)
    step_forward_viewing_threshold = config.get('nav_step_forward_view_threshold', 0.25)
    step_viewing_threshold = config.get('nav_step_view_threshold', 0.5)
    step_drift_threshold = config.get('nav_step_drift_threshold', 0.5)

    turn_max_distance = config.get('nav_turn_max_distance', 15)
    turn_viewing_threshold = config.get('nav_turn_view_threshold', 0.7)

    direction = 'direction'
    viewing = 'viewing'
    drift = 'drift'

    steps = {
        'step_forward': {direction: 0, viewing: step_forward_viewing_threshold, drift: step_drift_threshold},
        'step_backward': {direction: np.pi, viewing: 2 * step_viewing_threshold, drift: step_drift_threshold},
        'step_left': {direction: -np.pi / 2, viewing: 2 * step_viewing_threshold, drift: step_drift_threshold},
        'step_right': {direction: np.pi / 2, viewing: 2 * step_viewing_threshold, drift: step_drift_threshold}
    }

    turns = {
        'turn_left': {direction: -np.pi / 2, viewing: turn_viewing_threshold},
        'turn_right': {direction: np.pi / 2, viewing: turn_viewing_threshold},
        'turn_u': {direction: np.pi, viewing: turn_viewing_threshold}
    }

    graph = nx.DiGraph()

    for i in range(0, D.shape[0]):

        distances = D[i, :]
        oc = optical_centers[i]
        vd = viewing_directions[i]

        ordered_indices, viewing_turns, motion_angles, vertical_dir_diffs, vertical_motion_diffs = \
            get_direction_turns_and_motion_angles(
                min_distance,
                step_max_distance,
                step_pref_distance,
                distances,
                oc,
                vd,
                optical_centers,
                viewing_directions
        )

        for key in steps:
            step = steps[key]
            motion_drift = angle_diff(motion_angles, step[direction])
            motion_drift = np.max(np.vstack((np.abs(motion_drift - viewing_turns), np.abs(motion_drift))), 0)

            step_indices = np.where((motion_drift < step[drift])
                                    & (np.abs(viewing_turns) < step[viewing])
                                    & (np.abs(vertical_motion_diffs) < 0.5)
                                    & (np.abs(vertical_dir_diffs) < 0.5))[0]

            if len(step_indices) > 0:
                step_index = ordered_indices[step_indices[0]]
                graph.add_edge(shot_ids[i], shot_ids[step_index], weight=distances[step_index], direction=key)

        ordered_indices, viewing_turns, motion_angles, vertical_dir_diffs, vertical_motion_diffs = \
            get_direction_turns_and_motion_angles(
                min_distance,
                turn_max_distance,
                0,
                distances,
                oc,
                vd,
                optical_centers,
                viewing_directions
        )

        for key in turns:
            turn = turns[key]
            viewing_diff = np.abs(angle_diff(viewing_turns, turn[direction]))
            turn_indices = np.where((viewing_diff < turn[viewing])
                                    & (np.abs(vertical_motion_diffs) < 0.5)
                                    & (np.abs(vertical_dir_diffs) < 0.5))[0]

            if len(turn_indices) > 0:
                turn_index = ordered_indices[turn_indices[0]]
                graph.add_edge(shot_ids[i], shot_ids[turn_index], weight=distances[turn_index], direction=key)

    return graph


if __name__ == "__main__":
    start = time.time()
    parser = argparse.ArgumentParser(description='Compute navigation graph from reconstruction')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    recs = data.load_reconstruction()
    navigation_graphs = []

    rec_graph = create_optical_center_graph(recs, data.config)
    navigation_graph = {
        'edges': {},
        'nodes': list(rec_graph.node)
    }

    for edge in rec_graph.edge:
        navigation_graph['edges'][edge] = rec_graph.edge[edge]

    navigation_graphs.append(navigation_graph)

    data.save_navigation_graph(navigation_graphs)

    end = time.time()
    with open(data.profile_log(), 'a') as fout:
        fout.write('Navigation graphs: {0}\n'.format(end - start))


