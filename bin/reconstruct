#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import math
import numpy as np
import cv2
import argparse
from collections import defaultdict
import json
from itertools import combinations
from opensfm import transformations as tf
from opensfm import dataset
from opensfm import features
from opensfm import multiview
import networkx as nx
from networkx.algorithms import bipartite


def best_initial_pair(graph):
    #TODO(pau): implement H vs F test to choose wiselier

    # Get the image connectivity graph.
    track_nodes, image_nodes = bipartite.sets(graph)
    image_graph = bipartite.weighted_projected_graph(graph, image_nodes)
    best_pair = None
    best_outliers = 0
    for im1, im2, d in image_graph.edges(data=True):
        tracks, p1, p2 = dataset.common_tracks(graph, im1, im2)
        if len(tracks) >= 100:
            H, inliers = cv2.findHomography(p1, p2, cv2.cv.CV_RANSAC, 5)
            outliers = len(tracks) - float(inliers.sum())
            print 'inliers {0} / {1}'.format(inliers.sum(), len(tracks))
            if outliers > best_outliers:
                best_outliers = outliers
                best_pair = (im1, im2)
                print 'Best inliers {0} / {1}'.format(inliers.sum(), len(tracks))
    return best_pair


def bootstrap_reconstruction(data, graph):
    im1, im2 = best_initial_pair(graph)

    print 'Matching image', im1, 'with image', im2
    d1 = data.exif_data(im1)
    d2 = data.exif_data(im2)
    tracks, p1, p2 = dataset.common_tracks(graph, im1, im2)

    print 'Number of common tracks', len(tracks)
    R, t, inliers, Xs = features.two_view_reconstruction(p1, p2, d1, d2, data.config)
    print 'Number of inliers', len(inliers)

    reconstruction = {
        "cameras": {
            "main_camera": {
                "width": d1["width"],
                "height": d1["height"],
                "focal": d1["focal_ratio"] * d1["width"],
            },
        },

        "shots" : {
            im1: {
                "camera": "main_camera",
                "rotation": [0, 0, 0],
                "translation": [0, 0, 0],
            },
            im2: {
                "camera": "main_camera",
                "rotation": list(cv2.Rodrigues(R)[0].flat),
                "translation": list(t),
            },
        },

        "points" : {
        },
    }
    triangulate_shot_features(graph, reconstruction, im1)
    return reconstruction


def reconstructed_points_for_images(graph, reconstruction):
    tracks, images = bipartite.sets(graph)
    res = []
    for image in images:
        if image not in reconstruction['shots']:
            common_tracks = 0
            for track in graph[image]:
                if track in reconstruction['points']:
                    common_tracks += 1
            res.append((image, common_tracks))
    return sorted(res, key=lambda x: -x[1])


def rotate(angleaxis, point):
    R = cv2.Rodrigues(np.array(angleaxis, dtype=float))[0]
    return R.dot(np.array(point))


def single_reprojection_error(camera, shot, point, observation):
    p = rotate(shot['rotation'], point['coordinates'])
    p += shot['translation']
    xp = p[0] / p[2]
    yp = p[1] / p[2]

    l1 = camera.get('k1', 0.0)
    l2 = camera.get('k2', 0.0)
    r2 = xp * xp + yp * yp;
    distortion = 1.0 + r2  * (l1 + l2  * r2)

    predicted_x = camera['focal'] * distortion * xp + camera['width'] / 2
    predicted_y = camera['focal'] * distortion * yp + camera['height'] / 2

    rx = predicted_x - observation[0]
    ry = predicted_y - observation[1]
    return np.sqrt(rx * rx + ry * ry)


def reprojection_error(graph, reconstruction):
    tracks, shots = bipartite.sets(graph)
    errors = []
    for shot_id in shots:
        if shot_id in reconstruction['shots']:
            for track_id in graph[shot_id]:
                if track_id in reconstruction['points']:
                    observation = graph[shot_id][track_id]['feature']
                    shot = reconstruction['shots'][shot_id]
                    camera = reconstruction['cameras'][shot['camera']]
                    point = reconstruction['points'][track_id]
                    errors.append(single_reprojection_error(camera, shot, point, observation))
    return np.median(errors)


def resect(graph, reconstruction, shot_id, min_inliers=20):
    '''Add a shot to the reconstruction.
    '''
    xs = []
    Xs = []
    for track in graph[shot_id]:
        if track in reconstruction['points']:
            xs.append(graph[shot_id][track]['feature'])
            Xs.append(reconstruction['points'][track]['coordinates'])
    x = np.array(xs)
    X = np.array(Xs)
    if len(x) < 5:
        return False
    K = K_from_camera(reconstruction['cameras']['main_camera'])
    dist = np.array([0,0,0,0.])
    R, t, inliers = cv2.solvePnPRansac(X.astype(np.float32), x.astype(np.float32), K, dist)
    if inliers is None:
        print 'Resection no inliers'
        return False
    print 'Resection inliers:', len(inliers), '/', len(x)
    if len(inliers) >= min_inliers:
        reconstruction['shots'][shot_id] = {
            "camera": "main_camera",
            "rotation": list(R.flat),
            "translation": list(t.flat),
        }
        return True
    else:
        return False

def K_from_camera(camera):
    f = camera['focal']
    w = camera['width']
    h = camera['height']
    return np.array([[f, 0, w / 2],
                     [0, f, h / 2],
                     [0, 0, 1]])

def Rt_from_shot(shot):
    Rt = np.empty((3, 4))
    Rt[:,:3] = cv2.Rodrigues(np.array(shot['rotation'], dtype=float))[0]
    Rt[:, 3] = shot['translation']
    return Rt

def projection_matrix(camera, shot):
    K = K_from_camera(camera)
    Rt = Rt_from_shot(shot)
    return np.dot(K, Rt)

def angle_between_rays(P1, x1, P2, x2):
    v1 = multiview.pixel_direction(P1[:,:3], x1)
    v2 = multiview.pixel_direction(P2[:,:3], x2)
    return multiview.vector_angle(v1, v2)


def triangulate_track(track, reconstruction, reproj_threshold=3):
    ''' Triangulate a track
    '''
    P_by_id = {}
    Ps = []
    xs = []
    for shot in graph[track]:
        if shot in reconstruction['shots']:
            if shot not in P_by_id:
                s = reconstruction['shots'][shot]
                c = reconstruction['cameras'][s['camera']]
                P_by_id[shot] = projection_matrix(c, s)
            Ps.append(P_by_id[shot])
            xs.append(graph[track][shot]['feature'])
    if len(Ps) >= 2:
        max_angle = 0
        for i, j in combinations(range(len(Ps)), 2):
            angle = angle_between_rays(Ps[i], xs[i], Ps[j], xs[j])
            max_angle = max(angle, max_angle)

        if max_angle > math.radians(2):
            X = multiview.triangulate(Ps, xs)
            error = 0
            Xh = multiview.homogeneous(X)
            for P, x in zip(Ps, xs):
                xx, yy, zz = P.dot(Xh)
                if zz <= 0:
                    error = 999999999.0
                reprojected_x = np.array([xx / zz, yy / zz])
                error = max(error, (reprojected_x - x).max())
            if error < reproj_threshold:
                reconstruction['points'][track] = {
                    "coordinates": list(X),
                }

def triangulate_shot_features(graph, reconstruction, shot_id, reproj_threshold=3):
    '''Reconstruct as many tracks seen in shot_id as possible.
    '''
    for track in graph[shot_id]:
        if track not in reconstruction['points']:
            triangulate_track(track,reconstruction,reproj_threshold=reproj_threshold)


def retriangulate(graph, reconstruction):
    '''Re-triangulate 3D points
    '''
    track_nodes, image_nodes = bipartite.sets(graph)
    for track in track_nodes:
        if track not in reconstruction['points']:
            triangulate_track(track, reconstruction, reproj_threshold=10)

    # bundle adjustment
    reconstruction = features.bundle(data.tracks_file(), reconstruction)

    # filter points with large reprojection errors
    # TODO



def paint_reconstruction(data, graph, reconstruction):
    to_paint = defaultdict(list)
    to_paint_track = defaultdict(list)
    for track in reconstruction['points']:
        for shot in graph[track]:
            to_paint[shot].append(graph[track][shot]['feature'])
            to_paint_track[shot].append(track)

    track_colors = {track: np.zeros(3) for track in reconstruction['points']}
    track_sum = {track: 0 for track in reconstruction['points']}

    for shot in to_paint:
        features = np.array(to_paint[shot]).astype(int)
        tracks = to_paint_track[shot]
        im = data.image_as_array(shot)
        colors = im[features[:,1], features[:,0]]
        for track, color in zip(tracks, colors):
            track_colors[track] += color
            track_sum[track] += 1

    for track in reconstruction['points']:
        c = track_colors[track] / track_sum[track]
        reconstruction['points'][track]['color'] = list(c)

def paint_reconstruction_constant(data, graph, reconstruction):
    for track in reconstruction['points']:
        reconstruction['points'][track]['color'] = [200, 180, 255]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Compute reconstruction')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    graph = data.tracks_graph()

    reconstruction = bootstrap_reconstruction(data, graph)
    reconstruction = features.bundle(data.tracks_file(), reconstruction)

    do_retriangulation = False

    i = 0
    while True:
        paint_reconstruction_constant(data, graph, reconstruction)
        with open(data.reconstruction_file().replace('json', '%04d.json'%i), 'w') as fout:
            fout.write(json.dumps(reconstruction, indent=4))
            i += 1
        common_tracks = reconstructed_points_for_images(graph, reconstruction)
        prev_num_points = 0
        if not common_tracks:
            break
        for image, num_tracks in common_tracks:
            print 'Adding {0} to the reconstruction'.format(image)
            print reconstruction['cameras']['main_camera']['focal']
            if resect(graph, reconstruction, image, min_inliers=15):
                print 'Resection succeded'
                reconstruction = features.bundle(data.tracks_file(), reconstruction)
                triangulate_shot_features(graph, reconstruction, image)
                reconstruction = features.bundle(data.tracks_file(), reconstruction)
                print 'reprojection_error', reprojection_error(graph, reconstruction)
                num_points = len(reconstruction['points'])
                if (num_points > prev_num_points*1.25 and i > 0) and do_retriangulation:
                    retriangulate(graph, reconstruction)
                    reconstruction = features.bundle(data.tracks_file(), reconstruction)
                    prev_num_points = num_points
                break
            else:
                print 'Resection failed'
        else:
            print 'Some cameras could be resected'
            break

    print 'Painting the reconstruction'
    paint_reconstruction(data, graph, reconstruction)
    with open(data.reconstruction_file(), 'w') as fout:
        fout.write(json.dumps(reconstruction, indent=4))
