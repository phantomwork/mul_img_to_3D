#!/usr/bin/env python

import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import time
import json
import cv2
import numpy as np
import scipy.spatial.distance as dist
import networkx as nx

from opensfm import dataset

def load_reconstructions(data):
    with open(data.reconstruction_file()) as fin:
        return json.load(fin)

def optical_center(shot):
    R = cv2.Rodrigues(np.array(shot['rotation'], dtype=float))[0]
    t = shot['translation']
    return -R.T.dot(t)

def viewing_direction(shot):
    R = cv2.Rodrigues(np.array(shot['rotation'], dtype=float))[0]
    t = np.array([0, 0, 1])
    return R.T.dot(t)

def vector2_angle(x1, y1, x2, y2):
    angle = np.arctan2(y1, x1) - np.arctan2(y2, x2)
    if angle > np.pi:
        return angle - 2 * np.pi
    elif angle < -np.pi:
        return angle + 2 * np.pi
    else:
        return angle

def create_optical_center_graph(reconstruction):

    optical_centers = []
    viewing_directions = []
    shot_ids = []

    for shot_id in sorted(reconstruction['shots'].keys()):
        shot = reconstruction['shots'][shot_id]
        optical_centers.append(optical_center(shot))
        viewing_directions.append(viewing_direction(shot))
        shot_ids.append(shot_id)

    optical_centers = np.vstack(optical_centers)
    viewing_directions = np.vstack(viewing_directions)

    D = dist.squareform(dist.pdist(optical_centers))

    turn_threshold = 0.25
    min_distance = 0.01
    max_distance = 3

    directions = {
        'forward': [0, 0],
        'backward': [np.pi, 0],
        'left': [-np.pi / 2, 0],
        'right': [np.pi / 2, 0]
     }

    graph = nx.DiGraph()

    for i in range(0, D.shape[0]):

        distances = D[i, :]
        oc = optical_centers[i]
        vd = viewing_directions[i]

        # Order potential optical centers according to shortest distance
        potential = np.where((min_distance < distances) & (distances < max_distance))[0]
        ordered_indices = potential[np.argsort(distances[potential])]
        motions = optical_centers[ordered_indices] - oc
        viewings = viewing_directions[ordered_indices]

        motion_angles = np.array([vector2_angle(vd[0], vd[1], motion[0], motion[1]) for motion in motions], float)
        viewing_angle_differences = np.array([vector2_angle(vd[0], vd[1], viewing[0], viewing[1]) for viewing in viewings], float)

        for key in directions:
            # Make sure the angle difference is less than Pi
            ma_diff = np.abs(motion_angles - directions[key][0])
            ma_diff = np.min(np.vstack((ma_diff, 2*np.pi - ma_diff)).T, 1)
            va_diff = np.abs(viewing_angle_differences - directions[key][1])
            va_diff = np.min(np.vstack((va_diff, 2*np.pi - va_diff)).T, 1)

            direction_indices = np.where((ma_diff < turn_threshold) & (va_diff < turn_threshold))[0]

            if len(direction_indices) > 0:
                direction_index = ordered_indices[direction_indices[0]]
                graph.add_edge(shot_ids[i], shot_ids[direction_index], weight=distances[direction_index], direction=key)

    return graph

if __name__ == "__main__":
    start = time.time()
    parser = argparse.ArgumentParser(description='Compute directed graph from reconstruction')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    reconstructions = load_reconstructions(data)
    directed_graphs = []

    for r in reconstructions:
        rec_graph = create_optical_center_graph(r)
        directed_graph = {
            'edges': {},
            'nodes': list(rec_graph.node)
        }

        for edge in rec_graph.edge:
            directed_graph['edges'][edge] = rec_graph.edge[edge]

        directed_graphs.append(directed_graph)

    with open(data.directed_graph(), 'w') as fout:
        fout.write(json.dumps(directed_graphs))

    end = time.time()
    with open(data.profile_log(), 'a') as fout:
        fout.write('reconstruction graphs: {0}\n'.format(end - start))


